{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useActions } from \"./useActions\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ActionTypes } from \"../redux/reducers/weatherReducer\";\nimport { useDispatch } from \"react-redux\";\nexport const useFetchWeather = () => {\n  _s();\n\n  const {\n    fetchWeater\n  } = useActions();\n  const dispatch = useDispatch();\n\n  const fetchWeaterFunc = async () => {\n    try {\n      dispatch({\n        type: ActionTypes.FETCH_WEATHER\n      });\n      const response = await axios.get('https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/kyiv?unitGroup=metric&key=KXLCQFR4Q8PKE8LW86YXF7QWD&contentType=json');\n      console.log(response.data);\n      const weather = JSON.parse(response.data);\n      return fetchWeater(weather);\n    } catch (e) {\n      dispatch({\n        type: ActionTypes.FETCH_WEATHER_ERROR,\n        payload: 'error 404'\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchWeaterFunc();\n  }, []);\n};\n\n_s(useFetchWeather, \"G9A0Rj5qq3jHKvJMBSTzOabbe3s=\", false, function () {\n  return [useActions, useDispatch];\n});","map":{"version":3,"names":["useActions","useEffect","axios","ActionTypes","useDispatch","useFetchWeather","fetchWeater","dispatch","fetchWeaterFunc","type","FETCH_WEATHER","response","get","console","log","data","weather","JSON","parse","e","FETCH_WEATHER_ERROR","payload"],"sources":["C:/Users/вадим/Desktop/weather-app/frontend/src/hooks/useFetchWeather.ts"],"sourcesContent":["import {useActions} from \"./useActions\";\r\nimport {useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport {ActionTypes, IWeather} from \"../redux/reducers/weatherReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const useFetchWeather = () => {\r\n    const {fetchWeater} = useActions();\r\n    const dispatch = useDispatch();\r\n    const fetchWeaterFunc = async()=>{\r\n        try{\r\n            dispatch({type:ActionTypes.FETCH_WEATHER});\r\n            const response = await axios.get('https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/kyiv?unitGroup=metric&key=KXLCQFR4Q8PKE8LW86YXF7QWD&contentType=json');\r\n            console.log(response.data);\r\n            const weather =  JSON.parse(response.data);\r\n            return fetchWeater(weather);\r\n        }\r\n        catch (e){\r\n            dispatch({type:ActionTypes.FETCH_WEATHER_ERROR,payload:'error 404'});\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetchWeaterFunc();\r\n    }, []);\r\n}"],"mappings":";;AAAA,SAAQA,UAAR,QAAyB,cAAzB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAAoC,kCAApC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;EAAA;;EACjC,MAAM;IAACC;EAAD,IAAgBN,UAAU,EAAhC;EACA,MAAMO,QAAQ,GAAGH,WAAW,EAA5B;;EACA,MAAMI,eAAe,GAAG,YAAS;IAC7B,IAAG;MACCD,QAAQ,CAAC;QAACE,IAAI,EAACN,WAAW,CAACO;MAAlB,CAAD,CAAR;MACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,0JAAV,CAAvB;MACAC,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;MACA,MAAMC,OAAO,GAAIC,IAAI,CAACC,KAAL,CAAWP,QAAQ,CAACI,IAApB,CAAjB;MACA,OAAOT,WAAW,CAACU,OAAD,CAAlB;IACH,CAND,CAOA,OAAOG,CAAP,EAAS;MACLZ,QAAQ,CAAC;QAACE,IAAI,EAACN,WAAW,CAACiB,mBAAlB;QAAsCC,OAAO,EAAC;MAA9C,CAAD,CAAR;IACH;EACJ,CAXD;;EAYApB,SAAS,CAAC,MAAM;IACZO,eAAe;EAClB,CAFQ,EAEN,EAFM,CAAT;AAGH,CAlBM;;GAAMH,e;UACaL,U,EACLI,W"},"metadata":{},"sourceType":"module"}