{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { daysLong } from \"../utils/days\";\nimport { useMemo } from \"react\";\nexport const useNormalDate = currentWeatherState => {\n  _s();\n\n  function getLongDay(daySh) {\n    return daysLong.filter(day => day.dayShort === daySh)[0].dayLong;\n  }\n\n  const date = useMemo(() => {\n    if ((currentWeatherState === null || currentWeatherState === void 0 ? void 0 : currentWeatherState.datetimeEpoch) === undefined) return '';\n    let fullDate = String(new Date((currentWeatherState === null || currentWeatherState === void 0 ? void 0 : currentWeatherState.datetimeEpoch) * 1000)).split('202')[0];\n    const day = getLongDay(fullDate.split(' ')[0]);\n    const newFullDate = fullDate.replace(fullDate.split(' ')[0], day);\n    return newFullDate.split(' ')[0] + ' ' + newFullDate.split(' ')[2] + ' ' + newFullDate.split(' ')[1];\n  }, [currentWeatherState === null || currentWeatherState === void 0 ? void 0 : currentWeatherState.datetimeEpoch]);\n  return date;\n};\n\n_s(useNormalDate, \"/i5/KsEptyuA1SdhX3MWimUQvhU=\");","map":{"version":3,"names":["daysLong","useMemo","useNormalDate","currentWeatherState","getLongDay","daySh","filter","day","dayShort","dayLong","date","datetimeEpoch","undefined","fullDate","String","Date","split","newFullDate","replace"],"sources":["C:/Users/вадим/Desktop/weather-app/frontend/src/hooks/useNormalDate.ts"],"sourcesContent":["import {ICurrentSate} from \"../redux/reducers/weatherReducer\";\r\nimport {daysLong} from \"../utils/days\";\r\nimport {useMemo} from \"react\";\r\n\r\nexport const useNormalDate =(currentWeatherState:ICurrentSate)=>{\r\n    function getLongDay(daySh: string) {\r\n        return daysLong.filter(day => day.dayShort === daySh)[0].dayLong\r\n    }\r\nconst date = useMemo<string>(() => {\r\n    if (currentWeatherState?.datetimeEpoch === undefined) return '';\r\n    let fullDate: string = String(new Date(currentWeatherState?.datetimeEpoch * 1000)).split('202')[0];\r\n    const day: string = getLongDay(fullDate.split(' ')[0]);\r\n    const newFullDate: string = fullDate.replace(fullDate.split(' ')[0], day);\r\n    return newFullDate.split(' ')[0] + ' ' +\r\n        newFullDate.split(' ')[2] + ' ' +\r\n        newFullDate.split(' ')[1];\r\n}, [currentWeatherState?.datetimeEpoch]);\r\n    return date;\r\n}"],"mappings":";;AACA,SAAQA,QAAR,QAAuB,eAAvB;AACA,SAAQC,OAAR,QAAsB,OAAtB;AAEA,OAAO,MAAMC,aAAa,GAAGC,mBAAD,IAAoC;EAAA;;EAC5D,SAASC,UAAT,CAAoBC,KAApB,EAAmC;IAC/B,OAAOL,QAAQ,CAACM,MAAT,CAAgBC,GAAG,IAAIA,GAAG,CAACC,QAAJ,KAAiBH,KAAxC,EAA+C,CAA/C,EAAkDI,OAAzD;EACH;;EACL,MAAMC,IAAI,GAAGT,OAAO,CAAS,MAAM;IAC/B,IAAI,CAAAE,mBAAmB,SAAnB,IAAAA,mBAAmB,WAAnB,YAAAA,mBAAmB,CAAEQ,aAArB,MAAuCC,SAA3C,EAAsD,OAAO,EAAP;IACtD,IAAIC,QAAgB,GAAGC,MAAM,CAAC,IAAIC,IAAJ,CAAS,CAAAZ,mBAAmB,SAAnB,IAAAA,mBAAmB,WAAnB,YAAAA,mBAAmB,CAAEQ,aAArB,IAAqC,IAA9C,CAAD,CAAN,CAA4DK,KAA5D,CAAkE,KAAlE,EAAyE,CAAzE,CAAvB;IACA,MAAMT,GAAW,GAAGH,UAAU,CAACS,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAD,CAA9B;IACA,MAAMC,WAAmB,GAAGJ,QAAQ,CAACK,OAAT,CAAiBL,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAjB,EAAyCT,GAAzC,CAA5B;IACA,OAAOU,WAAW,CAACD,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,IAA4B,GAA5B,GACHC,WAAW,CAACD,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CADG,GACyB,GADzB,GAEHC,WAAW,CAACD,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAFJ;EAGH,CARmB,EAQjB,CAACb,mBAAD,aAACA,mBAAD,uBAACA,mBAAmB,CAAEQ,aAAtB,CARiB,CAApB;EASI,OAAOD,IAAP;AACH,CAdM;;GAAMR,a"},"metadata":{},"sourceType":"module"}