{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0432\\u0430\\u0434\\u0438\\u043C\\\\Desktop\\\\weather-app\\\\frontend\\\\src\\\\pages\\\\SevenDays\\\\SevenDays.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { WeatherApi } from \"../../API/WeatherApi\";\nimport { useActions } from \"../../hooks/useActions\";\nimport Loader from \"../../components/Loader/Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SevenDays = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    fetchWeater\n  } = useActions();\n  const params = useParams();\n  const defaultCity = useTypedSelector(state => state.weather.resolvedAdress);\n  const daysArray = useTypedSelector(state => {\n    var _state$weather;\n\n    return (_state$weather = state.weather) === null || _state$weather === void 0 ? void 0 : _state$weather.days;\n  });\n  let city = useMemo(() => {\n    if (params.city) return params.city;\n    return defaultCity;\n  }, []);\n\n  const fetchSevenDays = async city => {\n    try {\n      setIsLoading(true);\n      const weather = await WeatherApi.getWeatherByCity(city);\n      setIsLoading(false);\n      return fetchWeater(weather);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    if (!daysArray) {\n      fetchSevenDays(city);\n    }\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__LoaderWrapper\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        marginTop: 200\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"7 days\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SevenDays, \"oWcTY/ex8DQQdm2ZrUceZi10CRo=\", false, function () {\n  return [useActions, useParams, useTypedSelector, useTypedSelector];\n});\n\n_c = SevenDays;\nexport default SevenDays;\n\nvar _c;\n\n$RefreshReg$(_c, \"SevenDays\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","useParams","useTypedSelector","WeatherApi","useActions","Loader","SevenDays","isLoading","setIsLoading","fetchWeater","params","defaultCity","state","weather","resolvedAdress","daysArray","days","city","fetchSevenDays","getWeatherByCity","e","console","log"],"sources":["C:/Users/вадим/Desktop/weather-app/frontend/src/pages/SevenDays/SevenDays.tsx"],"sourcesContent":["import React, {useEffect, useMemo, useState} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {IWeather, IWeatherDays} from \"../../redux/reducers/weatherReducer\";\r\nimport {WeatherApi} from \"../../API/WeatherApi\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\n\r\nconst SevenDays = () => {\r\n    type IParams = {\r\n        city: string\r\n    }\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const {fetchWeater} = useActions();\r\n    const params = useParams<IParams>();\r\n    const defaultCity = useTypedSelector(state => state.weather.resolvedAdress);\r\n    const daysArray: IWeatherDays[] = useTypedSelector(state => state.weather?.days);\r\n    let city: string = useMemo<string>(() => {\r\n        if (params.city)\r\n            return params.city\r\n        return defaultCity;\r\n    }, []);\r\n    const fetchSevenDays = async (city: string) => {\r\n        try {\r\n            setIsLoading(true);\r\n            const weather: IWeather = await WeatherApi.getWeatherByCity(city);\r\n            setIsLoading(false);\r\n            return fetchWeater(weather);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!daysArray) {\r\n            fetchSevenDays(city);\r\n        }\r\n    }, []);\r\n    if (isLoading) {\r\n        return <div className='app__LoaderWrapper'><Loader marginTop={200}/></div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>7 days</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SevenDays;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,OAA1B,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAEA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAIpB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAU,IAAV,CAA1C;EACA,MAAM;IAACS;EAAD,IAAgBL,UAAU,EAAhC;EACA,MAAMM,MAAM,GAAGT,SAAS,EAAxB;EACA,MAAMU,WAAW,GAAGT,gBAAgB,CAACU,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcC,cAAxB,CAApC;EACA,MAAMC,SAAyB,GAAGb,gBAAgB,CAACU,KAAK;IAAA;;IAAA,yBAAIA,KAAK,CAACC,OAAV,mDAAI,eAAeG,IAAnB;EAAA,CAAN,CAAlD;EACA,IAAIC,IAAY,GAAGlB,OAAO,CAAS,MAAM;IACrC,IAAIW,MAAM,CAACO,IAAX,EACI,OAAOP,MAAM,CAACO,IAAd;IACJ,OAAON,WAAP;EACH,CAJyB,EAIvB,EAJuB,CAA1B;;EAKA,MAAMO,cAAc,GAAG,MAAOD,IAAP,IAAwB;IAC3C,IAAI;MACAT,YAAY,CAAC,IAAD,CAAZ;MACA,MAAMK,OAAiB,GAAG,MAAMV,UAAU,CAACgB,gBAAX,CAA4BF,IAA5B,CAAhC;MACAT,YAAY,CAAC,KAAD,CAAZ;MACA,OAAOC,WAAW,CAACI,OAAD,CAAlB;IACH,CALD,CAKE,OAAOO,CAAP,EAAU;MACRC,OAAO,CAACC,GAAR,CAAYF,CAAZ;IACH;EACJ,CATD;;EAWAtB,SAAS,CAAC,MAAM;IACZ,IAAI,CAACiB,SAAL,EAAgB;MACZG,cAAc,CAACD,IAAD,CAAd;IACH;EACJ,CAJQ,EAIN,EAJM,CAAT;;EAKA,IAAIV,SAAJ,EAAe;IACX,oBAAO;MAAK,SAAS,EAAC,oBAAf;MAAA,uBAAoC,QAAC,MAAD;QAAQ,SAAS,EAAE;MAAnB;QAAA;QAAA;QAAA;MAAA;IAApC;MAAA;MAAA;MAAA;IAAA,QAAP;EACH;;EACD,oBACI;IAAA,uBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAtCD;;GAAMD,S;UAKoBF,U,EACPH,S,EACKC,gB,EACcA,gB;;;KARhCI,S;AAwCN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}