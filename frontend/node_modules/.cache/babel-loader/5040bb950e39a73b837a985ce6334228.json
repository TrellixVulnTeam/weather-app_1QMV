{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0432\\u0430\\u0434\\u0438\\u043C\\\\Desktop\\\\weather-app\\\\frontend\\\\src\\\\pages\\\\SevenDays\\\\SevenDays.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { WeatherApi } from \"../../API/WeatherApi\";\nimport { fetchWeater } from \"../../redux/action-creators/fetchWeater\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SevenDays = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const params = useParams();\n  const defaultCity = useTypedSelector(state => state.weather.resolvedAdress);\n  const daysArray = useTypedSelector(state => {\n    var _state$weather;\n\n    return (_state$weather = state.weather) === null || _state$weather === void 0 ? void 0 : _state$weather.days;\n  });\n  let city = useMemo(() => {\n    if (params.city) return params.city;\n    return defaultCity;\n  }, []);\n\n  const fetchSevenDays = async city => {\n    setIsLoading(true);\n    const weather = await WeatherApi.getWeatherByCity(city);\n    setIsLoading(false);\n    return fetchWeater(weather);\n  };\n\n  useEffect(() => {\n    if (!daysArray) {\n      console.log(city);\n      fetchSevenDays(city);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"7 days\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SevenDays, \"lIYMmsXG0Xpz0mBjOCfAa1oBTPM=\", false, function () {\n  return [useParams, useTypedSelector, useTypedSelector];\n});\n\n_c = SevenDays;\nexport default SevenDays;\n\nvar _c;\n\n$RefreshReg$(_c, \"SevenDays\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","useParams","useTypedSelector","WeatherApi","fetchWeater","SevenDays","isLoading","setIsLoading","params","defaultCity","state","weather","resolvedAdress","daysArray","days","city","fetchSevenDays","getWeatherByCity","console","log"],"sources":["C:/Users/вадим/Desktop/weather-app/frontend/src/pages/SevenDays/SevenDays.tsx"],"sourcesContent":["import React, {useEffect, useMemo, useState} from 'react';\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {IWeather, IWeatherDays} from \"../../redux/reducers/weatherReducer\";\r\nimport axios from \"axios\";\r\nimport {WeatherApi} from \"../../API/WeatherApi\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ActionTypes} from \"../../redux/types/action-types\";\r\nimport {fetchWeater} from \"../../redux/action-creators/fetchWeater\";\r\n\r\nconst SevenDays = () => {\r\n    type IParams={\r\n        city:string\r\n    }\r\n    const [isLoading,setIsLoading] = useState<boolean>(false);\r\n    const params = useParams<IParams>();\r\n    const defaultCity = useTypedSelector(state=>state.weather.resolvedAdress);\r\n    const daysArray:IWeatherDays[] = useTypedSelector(state=>state.weather?.days);\r\n    let city:string = useMemo<string>(()=>{\r\n        if(params.city)\r\n            return params.city\r\n        return defaultCity;\r\n    },[]);\r\n    const fetchSevenDays = async(city:string)=>{\r\n        setIsLoading(true);\r\n        const weather:IWeather = await WeatherApi.getWeatherByCity(city);\r\n        setIsLoading(false);\r\n        return fetchWeater(weather);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(!daysArray){\r\n            console.log(city)\r\n           fetchSevenDays(city);\r\n        }\r\n    },[]);\r\n    return (\r\n        <div>\r\n            <h1>7 days</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SevenDays;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,OAA1B,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,SAAqBC,SAArB,QAAqC,kBAArC;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAGA,SAAQC,UAAR,QAAyB,sBAAzB;AAGA,SAAQC,WAAR,QAA0B,yCAA1B;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAIpB,MAAM,CAACC,SAAD,EAAWC,YAAX,IAA2BP,QAAQ,CAAU,KAAV,CAAzC;EACA,MAAMQ,MAAM,GAAGP,SAAS,EAAxB;EACA,MAAMQ,WAAW,GAAGP,gBAAgB,CAACQ,KAAK,IAAEA,KAAK,CAACC,OAAN,CAAcC,cAAtB,CAApC;EACA,MAAMC,SAAwB,GAAGX,gBAAgB,CAACQ,KAAK;IAAA;;IAAA,yBAAEA,KAAK,CAACC,OAAR,mDAAE,eAAeG,IAAjB;EAAA,CAAN,CAAjD;EACA,IAAIC,IAAW,GAAGhB,OAAO,CAAS,MAAI;IAClC,IAAGS,MAAM,CAACO,IAAV,EACI,OAAOP,MAAM,CAACO,IAAd;IACJ,OAAON,WAAP;EACH,CAJwB,EAIvB,EAJuB,CAAzB;;EAKA,MAAMO,cAAc,GAAG,MAAMD,IAAN,IAAoB;IACvCR,YAAY,CAAC,IAAD,CAAZ;IACA,MAAMI,OAAgB,GAAG,MAAMR,UAAU,CAACc,gBAAX,CAA4BF,IAA5B,CAA/B;IACAR,YAAY,CAAC,KAAD,CAAZ;IACA,OAAOH,WAAW,CAACO,OAAD,CAAlB;EACH,CALD;;EAOAb,SAAS,CAAC,MAAI;IACV,IAAG,CAACe,SAAJ,EAAc;MACVK,OAAO,CAACC,GAAR,CAAYJ,IAAZ;MACDC,cAAc,CAACD,IAAD,CAAd;IACF;EACJ,CALQ,EAKP,EALO,CAAT;EAMA,oBACI;IAAA,uBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA/BD;;GAAMV,S;UAKaJ,S,EACKC,gB,EACaA,gB;;;KAP/BG,S;AAiCN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}