{"ast":null,"code":"export let ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"FETCH_WEATHER\"] = \"FETCH_WEATHER\";\n  ActionTypes[\"FETCH_WEATHER_SUCCESS\"] = \"FETCH_WEATHER_SUCCESS\";\n  ActionTypes[\"FETCH_WEATHER_ERROR\"] = \"FETCH_WEATHER_ERROR\";\n})(ActionTypes || (ActionTypes = {}));\n\nconst defaultState = {\n  resolvedAdress: 'Kyiv',\n  isLoading: false\n};\nexport const weatherReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionTypes.FETCH_WEATHER_SUCCESS:\n      return { ...state,\n        resolvedAdress: action.payload.resolvedAdress,\n        days: action.payload.days,\n        currentState: action.payload.currentConditions,\n        isLoading: false\n      };\n\n    case ActionTypes.FETCH_WEATHER:\n      return { ...state,\n        isLoading: true\n      };\n\n    case ActionTypes.FETCH_WEATHER_ERROR:\n      return { ...state,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ActionTypes","defaultState","resolvedAdress","isLoading","weatherReducer","state","action","type","FETCH_WEATHER_SUCCESS","payload","days","currentState","currentConditions","FETCH_WEATHER","FETCH_WEATHER_ERROR"],"sources":["C:/Users/вадим/Desktop/weather-app/frontend/src/redux/reducers/weatherReducer.ts"],"sourcesContent":["export enum ActionTypes {\r\n    FETCH_WEATHER = 'FETCH_WEATHER',\r\n    FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS',\r\n    FETCH_WEATHER_ERROR = 'FETCH_WEATHER_ERROR',\r\n}\r\n\r\nexport interface IActions {\r\n    type: ActionTypes\r\n    payload: any\r\n}\r\n\r\ninterface IWeatherDays {\r\n    datetime: string,\r\n    tempmax: number,\r\n    tempmin: number,\r\n    conditions: string\r\n}\r\n\r\ninterface ICurrentSate {\r\n    temp: string,\r\n    windspeed: number,\r\n    cloudcover: number,\r\n    conditions: string,\r\n    feelslike: number\r\n}\r\n\r\nexport interface IWeather {\r\n    resolvedAdress: string,\r\n    days?: Array<IWeatherDays>\r\n    currentState?: ICurrentSate,\r\n    isLoading:boolean\r\n}\r\n\r\nconst defaultState: IWeather = {\r\n    resolvedAdress: 'Kyiv',\r\n    isLoading:false\r\n}\r\nexport const weatherReducer = (state = defaultState, action: IActions) => {\r\n    switch (action.type) {\r\n        case ActionTypes.FETCH_WEATHER_SUCCESS:\r\n            return {\r\n                ...state, resolvedAdress: action.payload.resolvedAdress,\r\n                days: action.payload.days, currentState: action.payload.currentConditions,isLoading:false\r\n            }\r\n        case ActionTypes.FETCH_WEATHER: return{...state,isLoading: true}\r\n        case ActionTypes.FETCH_WEATHER_ERROR: return{...state,isLoading: false}\r\n        default:\r\n            return state;\r\n    }\r\n}"],"mappings":"AAAA,WAAYA,WAAZ;;WAAYA,W;EAAAA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAiCZ,MAAMC,YAAsB,GAAG;EAC3BC,cAAc,EAAE,MADW;EAE3BC,SAAS,EAAC;AAFiB,CAA/B;AAIA,OAAO,MAAMC,cAAc,GAAG,YAA4C;EAAA,IAA3CC,KAA2C,uEAAnCJ,YAAmC;EAAA,IAArBK,MAAqB;;EACtE,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKP,WAAW,CAACQ,qBAAjB;MACI,OAAO,EACH,GAAGH,KADA;QACOH,cAAc,EAAEI,MAAM,CAACG,OAAP,CAAeP,cADtC;QAEHQ,IAAI,EAAEJ,MAAM,CAACG,OAAP,CAAeC,IAFlB;QAEwBC,YAAY,EAAEL,MAAM,CAACG,OAAP,CAAeG,iBAFrD;QAEuET,SAAS,EAAC;MAFjF,CAAP;;IAIJ,KAAKH,WAAW,CAACa,aAAjB;MAAgC,OAAM,EAAC,GAAGR,KAAJ;QAAUF,SAAS,EAAE;MAArB,CAAN;;IAChC,KAAKH,WAAW,CAACc,mBAAjB;MAAsC,OAAM,EAAC,GAAGT,KAAJ;QAAUF,SAAS,EAAE;MAArB,CAAN;;IACtC;MACI,OAAOE,KAAP;EATR;AAWH,CAZM"},"metadata":{},"sourceType":"module"}